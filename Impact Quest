import pygame 
import sys
##sys is a cross-platform set of Python modules designed for writing video games. here we are pulling the files pygame and sys
pygame.init()
##this is to initialize the game 

SCREEN_WIDTH = 800
SCREEN_HEIGHT= 600
#this is the dimensions of the screen for the game, it's good practice to do this because when you want to change the dimensions of the screen, you only have to change this one variable. you will also reference this size for text or events. you will have the ability to modify the dimensions as you wish 

WHITE = (255,255,255)
BLACK = (0,0,0)
BLUE = (70,130, 180)
GREEN = (34, 139, 34)
RED = (178,34,34)
#this is to show colors on the screen, the numbers represent the amount of red, green, and blue in the color. we define color using the rbg method, colors in computing are meaasured using rbg (red, green, blue). history of rbg method dates back to using a flashlight to display color, so for the white color for example is generated by adding more light. where as black, is the absense of any color. hence, o. the maximum of all colors is white, combinationation of all colors goes up to 256, white is the maximum at 255. easiest way is to also look up a color wheel to see the color combinations or memorize the rgb values.

screen=pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
##this is to set the screen size to the dimensions we set above, the dimensions are what was set in the beginning.


pygame.display.set_caption("Impact Quest")
##this is to set the caption of the game to "Impact Quest"

font=pygame.font.Font(None,36)
## this set the font to be used in the game. we use none because we dont want to use a font, and we set the size to 36

clock = pygame.time.Clock()
##this is to set the clock to be used in the game and controlling frame rate. it times everything 

Menu = "menu"
SCENARIO_1 ="scenario_1"
SCENARIO_2="scenario_2"
END_SCREEN = "end"

##this is to set the menu, scenario 1, scenario 2, and end screen to be used in the game
current_state = Menu

#Buttons 
def draw_button(text,x, y, width, height, color, hover_color, action=None):
  ##this is to draw the button on the screen. the text is the text that will be displayed on the button, the x and y are the coordinates of the top left corner of the button, the width and height are the dimensions of the button,
  mouse =pygame.mouse.get_pos()
  click= pygame.mouse.get_pressed()
  if x+width > mouse[0] > x and y+height> mouse[1]>y:
    pygame.draw.rect(screen, hover_color, (x,y, width, height))
    if click[0] == 1 and action:
      (action)
  else:
    pygame.draw.rect(screen, color, (x,y,width, height))

text_surface = font.render(text, True, WHITE)
##here we are defining the text that will be displayed on the button. the text is the text that will be displayed on the button, the True is to make the text white, and the WHITE is to make the text white.
text_rect=text_surface.get_rect(center=(x+width//2, y+height//2))
##this is to get the rectangular area of the text. the center is to center the text on the button.
screen.blit(text_surface, text_rect)
## this is to display the text on the screen.
